# -*- coding: utf-8 -*-
"""LGM task -2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aFZgcpbqJL9XW5lE8bXbxsNP46raK_XR

# **Task 2) Prediction using Decision Tree Algorithm ::**

---
# **Author : Ayush Shende**

> *LetsGrowMore (LGM)*

# **importing required library**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sb
# %matplotlib inline

"""# **loading Iris Data set**"""

df = pd.read_csv("/content/Iris .csv")

"""# **Getting numerical Overview Over data **"""

df.describe()

df.info()

"""# **Checking Null VAlues**

"""

df.isnull().sum()

"""# **Saperating X and Y**"""

x = df.iloc[:,1:-1] 
y = df.iloc[:,-1]

print("X === \n{} \n\n Y== \n{}".format(x,y))
print("\n\nUnique values on Y  == {}".format(y.unique()))

"""# ***Visualizing Data using Box plot Graph ***"""

sb.boxplot(df["SepalWidthCm"])
plt.show()

sb.boxplot(df["SepalLengthCm"])
plt.show()

sb.boxplot(df["PetalLengthCm"])
plt.show()

sb.boxplot(df["PetalWidthCm"])
plt.show()

"""# ***Spliting Given Data in to Train And Test***"""

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test = train_test_split(x,y,
                                                 test_size = 0.3,
                                                 random_state=2021)

"""# **Viewing X , Y (Train & Test) Data **"""

print(x_train)

print(x_test.head())

print(y_train.head())

print(y_train.head())

print(x_test.shape[0])

"""# Implementing Decision **tree**"""

from sklearn.tree import DecisionTreeClassifier

DTC = DecisionTreeClassifier(random_state= 2021)
DTC.fit(x_train,y_train)
print("//**** We have created the Dicision tree Classifier ****\\\\")

"""# **Predicting data from the modal we  built**"""

y_pred = DTC.predict(x_test).reshape(-1,1)
y_pred[:6]

"""# ***Calculating The acuracy and Getting Confusion Matrix***"""

from sklearn.metrics import accuracy_score,confusion_matrix

print("The Accuract For the Model We Created  \n\n ===>>{}".format(accuracy_score(y_pred,y_test)))
print("\n\nConfusion Matrix for the modele we Created  ==>> \n\n{}".format(confusion_matrix(y_pred,y_test)))



